<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaskDialog</name>
    </assembly>
    <members>
        <member name="T:KPreisser.UI.TaskDialog">
            <summary>
            A task dialog is the successor of the message box and provides a lot more features.
            </summary>
            <remarks>
            For more information, see:
            https://docs.microsoft.com/en-us/windows/desktop/Controls/task-dialogs-overview
            
            Note: To use a task dialog, the application needs to be compiled with a manifest
            that contains a dependency to Microsoft.Windows.Common-Controls (6.0.0.0),
            and the thread needs to use the single-threaded apartment (STA) model.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialog.ContinueButtonClickHandlingMessage">
            <summary>
            A self-defined window message that we post to the task dialog when
            handling a <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/>
            notification, so that we will ignore further
            <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/> notifications
            until we process the posted message.
            </summary>
            <remarks>
            This is used to work-around a bug in the native task dialog, where
            a <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/> notification
            seems to be sent twice to the callback when you "click" a button by
            pressing its access key (mnemonic) and the dialog is still open when
            continuing the message loop.
            
            This work-around should not have negative effects, such as erroneously
            ignoring a valid button clicked notification when the user presses the
            button multiple times while the GUI thread is hangs - this seems
            to work correctly, as our posted message will be processed before
            further (valid) <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/>
            notifications are processed.
            
            See: https://gist.github.com/kpreisser/335fde8934da1e0c150fe71ee5ead433
            
            Note: We use a WM_APP message with a high value (WM_USER is not
            appropriate as it is private to the control class), in order to avoid
            conflicts with WM_APP messages which other parts of the application
            might want to send when they also subclassed the dialog window, although
            that should be unlikely.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialog.s_callbackProcDelegate">
            <summary>
            The delegate for the callback handler (that calls
            <see cref="M:KPreisser.UI.TaskDialog.HandleTaskDialogCallback(System.IntPtr,KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS,System.IntPtr,System.IntPtr)"/>) from which the native function
            pointer <see cref="F:KPreisser.UI.TaskDialog.s_callbackProcDelegatePtr"/> is created. 
            </summary>
            <remarks>
            We must store this delegate (and prevent it from being garbage-collected)
            to ensure the function pointer doesn't become invalid.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialog.s_callbackProcDelegatePtr">
            <summary>
            The function pointer created from <see cref="F:KPreisser.UI.TaskDialog.s_callbackProcDelegate"/>.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._waitingNavigationPages">
            <summary>
            A qeueue of <see cref="T:KPreisser.UI.TaskDialogPage"/>s that have been bound by
            navigating the dialog, but don't yet reflect the state of the
            native dialog because the corresponding
            <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_NAVIGATED"/> notification was
            not yet received.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._hwndDialog">
            <summary>
            Window handle of the task dialog when it is being shown.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._instanceHandlePtr">
            <summary>
            The <see cref="T:System.IntPtr"/> of a <see cref="T:System.Runtime.InteropServices.GCHandle"/> that represents this
            <see cref="T:KPreisser.UI.TaskDialog"/> instance.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._raisedOpened">
            <summary>
            Stores a value that indicates if the
            <see cref="E:KPreisser.UI.TaskDialog.Opened"/> event has been called and so the
            <see cref="E:KPreisser.UI.TaskDialog.Closed"/> event can be called later.
            </summary>
            <remarks>
            This is used to prevent raising the 
            <see cref="E:KPreisser.UI.TaskDialog.Closed"/> event without raising the
            <see cref="E:KPreisser.UI.TaskDialog.Opened"/> event first (e.g. if the dialog cannot be shown
            due to an invalid icon).
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._raisedPageCreated">
            <summary>
            Stores a value that indicates if the
            <see cref="E:KPreisser.UI.TaskDialogPage.Created"/> event has been called for the
            current <see cref="T:KPreisser.UI.TaskDialogPage"/> and so the corresponding
            <see cref="E:KPreisser.UI.TaskDialogPage.Destroyed"/> can be called later.
            </summary>
            <remarks>
            This is used to prevent raising the 
            <see cref="E:KPreisser.UI.TaskDialogPage.Destroyed"/> event without raising the
            <see cref="E:KPreisser.UI.TaskDialogPage.Created"/> event first (e.g. if navigation
            fails).
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._buttonClickNavigationCounter">
            <summary>
            A counter which is used to determine whether the dialog has been navigated
            while being in a <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/> handler.
            </summary>
            <remarks>
            When the dialog navigates within a ButtonClicked handler, the handler should
            always return S_FALSE to prevent the dialog from applying the button that
            raised the handler as dialog result. Otherwise, this can lead to memory access
            problems like <see cref="T:System.AccessViolationException"/>s, especially if the
            previous dialog page had radio buttons (but the new ones do not).
            
            See the comment in <see cref="M:KPreisser.UI.TaskDialog.HandleTaskDialogCallback(System.IntPtr,KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS,System.IntPtr,System.IntPtr)"/> for more
            information.
            
            When the dialog navigates, it sets the <c>navigationIndex</c> to the current
            <c>stackCount</c> value, so that the ButtonClicked handler can determine
            if the dialog has been navigated after it was called.
            Tracking the stack count and navigation index is necessary as there
            can be multiple ButtonClicked handlers on the call stack, for example
            if a ButtonClicked handler runs the message loop so that new click events
            can be processed.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._resultButton">
            <summary>
            The button designated as the dialog result by the handler for the
            <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/>
            notification.
            </summary>
            <remarks>
            This will be set the first time the
            <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/> handler returns
            <see cref="F:KPreisser.UI.TaskDialogNativeMethods.S_OK"/> to cache the button instance,
            so that <see cref="M:KPreisser.UI.TaskDialog.Show(System.IntPtr)"/> can then return it.
            
            Additionally, this is used to check if there was already a 
            <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/> handler that
            returned <see cref="F:KPreisser.UI.TaskDialogNativeMethods.S_OK"/>, so that further
            handles will return <see cref="F:KPreisser.UI.TaskDialogNativeMethods.S_FALSE"/> to
            not override the previously set result.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._isInNavigate">
            <summary>
            Specifies if the current code is called from within
            <see cref="M:KPreisser.UI.TaskDialog.Navigate(KPreisser.UI.TaskDialogPage)"/>.
            </summary>
            <remarks>
            This is used to detect if you call <see cref="M:KPreisser.UI.TaskDialog.Navigate(KPreisser.UI.TaskDialogPage)"/>
            from within an event raised by <see cref="M:KPreisser.UI.TaskDialog.Navigate(KPreisser.UI.TaskDialogPage)"/>,
            which is not supported.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialog._ignoreButtonClickedNotifications">
            <summary>
            Specifies if the <see cref="M:KPreisser.UI.TaskDialog.HandleTaskDialogCallback(System.IntPtr,KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS,System.IntPtr,System.IntPtr)"/> method should
            currently ignore <see cref="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED"/>
            notifications.
            </summary>
            <remarks>
            See <see cref="F:KPreisser.UI.TaskDialog.ContinueButtonClickHandlingMessage"/> for more information.
            </remarks>
        </member>
        <member name="E:KPreisser.UI.TaskDialog.Opened">
            <summary>
            Occurs after the task dialog has been created but before it is displayed.
            </summary>
            <remarks>
            You can use this event to allocate resources associated with the
            task dialog window handle, as it is the first event where
            <see cref="P:KPreisser.UI.TaskDialog.Handle"/> is available.
            
            Note: The dialog will not show until this handler returns (even if the
            handler would run the message loop).
            </remarks>
        </member>
        <member name="E:KPreisser.UI.TaskDialog.Shown">
            <summary>
            Occurs when the task dialog is first displayed.
            </summary>
        </member>
        <member name="E:KPreisser.UI.TaskDialog.Closing">
            <summary>
            Occurs when the task dialog closing.
            </summary>
            <remarks>
            You can cancel the close by setting
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>. Otherwise, the
            dialog window will close, and the <see cref="E:KPreisser.UI.TaskDialog.Closed"/> event will be
            raised afterwards.
            
            Note: The <see cref="E:KPreisser.UI.TaskDialog.Closed"/> event might not be called immediately
            after the <see cref="E:KPreisser.UI.TaskDialog.Closing"/> event (even though the dialog window
            has already closed). This can happen for example when showing multiple 
            (modeless) dialogs at the same time and then closing the one that
            was shown first – in that case, the <see cref="E:KPreisser.UI.TaskDialog.Closed"/> event for
            that dialog will be called only after the second dialog is also closed.
            
            Note: This event might not always be called, e.g. if navigation of the
            dialog fails; however, the <see cref="E:KPreisser.UI.TaskDialog.Closed"/> event will always be
            called.
            </remarks>
        </member>
        <member name="E:KPreisser.UI.TaskDialog.Closed">
            <summary>
            Occurs when the task dialog is closed.
            </summary>
            <remarks>
            You can use this event to free resources associated with the
            task dialog window handle, as it is the last event where
            <see cref="P:KPreisser.UI.TaskDialog.Handle"/> is available.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.#ctor(KPreisser.UI.TaskDialogPage)">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialog.Handle">
            <summary>
            Gets the window handle of the task dialog window, or <see cref="F:System.IntPtr.Zero"/>
            if the dialog is currently not being shown.
            </summary>
            <remarks>
            When showing the dialog, the handle will be available first when the
            <see cref="E:KPreisser.UI.TaskDialog.Opened"/> event occurs, and last when the
            <see cref="E:KPreisser.UI.TaskDialog.Closed"/> event occurs after which you shouldn't use it any more.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialog.Page">
            <summary>
            Gets or sets the <see cref="T:KPreisser.UI.TaskDialogPage"/> instance that contains
            the contents which this task dialog will display.
            </summary>
            <remarks>
            When setting this property while the task dialog is displayed, it will
            recreate its contents from the specified <see cref="T:KPreisser.UI.TaskDialogPage"/>
            ("navigation"). This means that the <see cref="E:KPreisser.UI.TaskDialogPage.Destroyed"/>
            event will occur for the current page, and after the dialog
            completed navigation, the <see cref="E:KPreisser.UI.TaskDialogPage.Created"/> event
            of the new page will occur.
            
            Please note that you cannot manipulate the task dialog or its controls
            immediately after navigating it (except for calling <see cref="M:KPreisser.UI.TaskDialog.Close"/>
            or navigating the dialog again).
            You will need to wait for the <see cref="E:KPreisser.UI.TaskDialogPage.Created"/>
            event to occur before you can manipulate the dialog or its controls.
            
            Note that when navigating the dialog, the new page will be bound
            immediately, but the previous page will not be unbound until the
            <see cref="E:KPreisser.UI.TaskDialogPage.Created"/> event of the new page is raised,
            because during that time the task dialog behaves as if it still
            showed the controls of the previous page.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialog.StartupLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialog.DoNotSetForeground">
            <summary>
            Gets or sets a value that indicates if the task dialog should not set
            itself as foreground window when showing it.
            </summary>
            <remarks>
            When setting this property to <c>true</c> and then showing the dialog, it
            causes the dialog to net set itself as foreground window. This means that
            if currently none of the application's windows has focus, the task dialog
            doesn't try to "steal" focus (which otherwise can result in the task dialog
            window being activated, or the taskbar button for the window flashing
            orange). However, if the application already has focus, the task dialog
            window will be activated anyway.
            
            Note: This property only has an effect on Windows 8 and higher.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialog.DialogIsShown">
            <summary>
            Gets a value that indicates whether <see cref="M:KPreisser.UI.TaskDialog.Show(System.IntPtr)"/> is
            currently being called.
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialog.HandleAvailable">
            <summary>
            Gets a value that indicates whether the native task dialog window has
            been created and its handle is available using the <see cref="P:KPreisser.UI.TaskDialog.Handle"/>
            property.
            </summary>
            <remarks>
            This property can only be <c>true</c> if <see cref="P:KPreisser.UI.TaskDialog.DialogIsShown"/> is
            also <c>true</c>. However, normally this property should be equivalent
            to <see cref="P:KPreisser.UI.TaskDialog.DialogIsShown"/>, because when showing the dialog, the
            callback should have been called setting the handle.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialog.RadioButtonClickedStackCount">
            <summary>
            Gets or sets the current count of stack frames that are in the
            <see cref="E:KPreisser.UI.TaskDialogRadioButton.CheckedChanged"/> event for the
            current task dialog.
            </summary>
            <remarks>
            This is used by the <see cref="P:KPreisser.UI.TaskDialogRadioButton.Checked"/> setter
            so that it can disallow the change when the count is greater than zero.
            Additionally, it is used to deny navigation of the task dialog in that
            case.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.Show(System.String,System.String,System.String,KPreisser.UI.TaskDialogButtons,KPreisser.UI.TaskDialogStandardIcon)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="instruction"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,KPreisser.UI.TaskDialogButtons,KPreisser.UI.TaskDialogStandardIcon)">
            <summary>
            
            </summary>
            <param name="owner">The owner window, or <c>null</c> to show a modeless dialog.</param>
            <param name="text"></param>
            <param name="instruction"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.Show(System.IntPtr,System.String,System.String,System.String,KPreisser.UI.TaskDialogButtons,KPreisser.UI.TaskDialogStandardIcon)">
            <summary>
            
            </summary>
            <param name="hwndOwner">
            The handle of the owner window, or <see cref="F:System.IntPtr.Zero"/> to show a
            modeless dialog.
            </param>
            <param name="text"></param>
            <param name="instruction"></param>
            <param name="title"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.Show">
            <summary>
            Shows the task dialog.
            </summary>
            <remarks>
            Showing the dialog will bind the <see cref="P:KPreisser.UI.TaskDialog.Page"/> and its
            controls until this method returns.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the task dialog.
            </summary>
            <remarks>
            Showing the dialog will bind the <see cref="P:KPreisser.UI.TaskDialog.Page"/> and its
            controls until this method returns.
            </remarks>
            <param name="owner">The owner window, or <c>null</c> to show a modeless dialog.</param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.Show(System.IntPtr)">
            <summary>
            Shows the task dialog.
            </summary>
            <remarks>
            Showing the dialog will bind the <see cref="P:KPreisser.UI.TaskDialog.Page"/> and its
            controls until this method returns.
            </remarks>
            <param name="hwndOwner">
            The handle of the owner window, or <see cref="F:System.IntPtr.Zero"/> to show a
            modeless dialog.
            </param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.Close">
            <summary>
            Closes the shown task dialog with a 
            <see cref="F:KPreisser.UI.TaskDialogResult.Cancel"/> result.
            </summary>
            <remarks>
            To close the dialog with a different result, call the
            <see cref="M:KPreisser.UI.TaskDialogButton.PerformClick"/> method of the
            <see cref="T:KPreisser.UI.TaskDialogButton"/> which you want to set as result.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.SwitchProgressBarMode(System.Boolean)">
            <summary>
            While the dialog is being shown, switches the progress bar mode to either a
            marquee progress bar or to a regular progress bar.
            For a marquee progress bar, you can enable or disable the marquee using
            <see cref="M:KPreisser.UI.TaskDialog.SetProgressBarMarquee(System.Boolean,System.Int32)"/>.
            </summary>
            <param name="marqueeProgressBar"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.SetProgressBarMarquee(System.Boolean,System.Int32)">
            <summary>
            While the dialog is being shown, enables or disables progress bar marquee when
            an marquee progress bar is displayed.
            </summary>
            <param name="enableMarquee"></param>
            <param name="animationSpeed">
            The time in milliseconds between marquee animation updates. If <c>0</c>, the
            animation will be updated every 30 milliseconds.
            </param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.SetProgressBarRange(System.Int32,System.Int32)">
            <summary>
            While the dialog is being shown, sets the progress bar range.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            The default range is 0 to 100.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.SetProgressBarPosition(System.Int32)">
            <summary>
            While the dialog is being shown, sets the progress bar position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.SetProgressBarState(System.Int32)">
            <summary>
            While the dialog is being shown, sets the progress bar state.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.ClickCheckBox(System.Boolean,System.Boolean)">
            <summary>
            While the dialog is being shown, sets the checkbox to the specified
            state.
            </summary>
            <param name="isChecked"></param>
            <param name="focus"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.OnOpened(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.OnShown(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.OnClosing(KPreisser.UI.TaskDialogClosingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.OnClosed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.Navigate(KPreisser.UI.TaskDialogPage)">
            <summary>
            While the dialog is being shown, recreates the dialog from the specified
            <paramref name="page"/>.
            </summary>
            <remarks>
            Note that you should not call this method in the <see cref="E:KPreisser.UI.TaskDialog.Opened"/>
            event because the task dialog is not yet displayed in that state.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialog.UpdateWindowSize">
            <summary>
            Forces the task dialog to update its window size according to its contents.
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogButton">
            <summary>
            
            </summary>
        </member>
        <member name="E:KPreisser.UI.TaskDialogButton.Click">
            <summary>
            Occurs when the button is clicked.
            </summary>
            <remarks>
            By default, the dialog will be closed after the event handler returns 
            (except for the <see cref="F:KPreisser.UI.TaskDialogResult.Help"/> button which instead
            will raise the <see cref="E:KPreisser.UI.TaskDialogPage.Help"/> event afterwards).
            To prevent the dialog from closing, set the
            <see cref="P:KPreisser.UI.TaskDialogButtonClickedEventArgs.CancelClose"/> property to
            <c>true</c>.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogButton.Enabled">
            <summary>
            
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogButton.ElevationRequired">
            <summary>
            
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogButton.DefaultButton">
            <summary>
            Gets or sets a value that indicates if this button will be the default button
            in the Task Dialog.
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogButton.PerformClick">
            <summary>
            Simulates a click on this button.
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogButtonClickedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogButtonClickedEventArgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogButtonClickedEventArgs.CancelClose">
            <summary>
            Gets or sets a value that indicates if the dialog should not be closed
            after the event handler returns.
            </summary>
            <remarks>
            When you don't set this property to <c>true</c>, the
            <see cref="E:KPreisser.UI.TaskDialog.Closing"/> event will occur afterwards.
            </remarks>
        </member>
        <member name="T:KPreisser.UI.TaskDialogButtons">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.OK">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.Yes">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.No">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.Cancel">
            <summary>
            
            </summary>
            <remarks>
            Note: Adding a Cancel button will automatically add a close button
            to the task dialog's title bar and will allow to close the dialog by
            pressing ESC or Alt+F4 (just as if you enabled
            <see cref="P:KPreisser.UI.TaskDialogPage.AllowCancel"/>).
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.Retry">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.Close">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.Ignore">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.TryAgain">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogButtons.Help">
            <summary>
            
            </summary>
            <remarks>
            Note: Clicking this button will not close the dialog, but will raise the
            <see cref="E:KPreisser.UI.TaskDialogPage.Help"/> event.
            </remarks>
        </member>
        <member name="T:KPreisser.UI.TaskDialogCheckBox">
            <summary>
            
            </summary>
        </member>
        <member name="E:KPreisser.UI.TaskDialogCheckBox.CheckedChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCheckBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCheckBox.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:KPreisser.UI.TaskDialogCheckBox.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogCheckBox.Checked">
            <summary>
            
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCheckBox.Focus">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCheckBox.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:KPreisser.UI.TaskDialogClosingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogClosingEventArgs.#ctor(KPreisser.UI.TaskDialogButton)">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogClosingEventArgs.CloseButton">
            <summary>
            Gets the <see cref="T:KPreisser.UI.TaskDialogButton"/> that is causing the task dialog
            to close.
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogControl.Tag">
            <summary>
            Gets or sets the object that contains data about the control.
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogControl.IsCreatable">
            <summary>
            Gets a value that indicates if the current state of this control
            allows it to be created in a task dialog when binding it.
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogControl.IsCreated">
            <summary>
            Gets or sets a value that indicates if this control has been created
            in a bound task dialog.
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogControl.ApplyInitialization">
            <summary>
            Applies initialization after the task dialog is displayed or navigated.
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogControl.BindCore">
            <summary>
            When overridden in a subclass, runs additional binding logic and returns
            flags to be specified before the task dialog is displayed or navigated.
            </summary>
            <remarks>
            This method will only be called if <see cref="P:KPreisser.UI.TaskDialogControl.IsCreatable"/> returns <c>true</c>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialogControl.UnbindCore">
            <summary>
            
            </summary>
            <remarks>
            This method will only be called if <see cref="M:KPreisser.UI.TaskDialogControl.BindCore"/> was called.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialogControl.ApplyInitializationCore">
            <summary>
            When overridden in a subclass, applies initialization after the task dialog
            is displayed or navigated.
            </summary>
            <remarks>
            This method will only be called if <see cref="P:KPreisser.UI.TaskDialogControl.IsCreatable"/> returns <c>true</c>.
            </remarks>
        </member>
        <member name="T:KPreisser.UI.TaskDialogCustomButton">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButton.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButton.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogCustomButton.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogCustomButton.DescriptionText">
            <summary>
            Gets or sets an additional description text that will be displayed in
            a separate line of the command link when
            <see cref="P:KPreisser.UI.TaskDialogPage.CustomButtonStyle"/> is set to
            <see cref="F:KPreisser.UI.TaskDialogCustomButtonStyle.CommandLinks"/> or
            <see cref="F:KPreisser.UI.TaskDialogCustomButtonStyle.CommandLinksNoIcon"/>.
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButton.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KPreisser.UI.TaskDialogCustomButtonCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButtonCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButtonCollection.Add(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="descriptionText"></param>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButtonCollection.SetItem(System.Int32,KPreisser.UI.TaskDialogCustomButton)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButtonCollection.InsertItem(System.Int32,KPreisser.UI.TaskDialogCustomButton)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButtonCollection.RemoveItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogCustomButtonCollection.ClearItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogCustomButtonStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogCustomButtonStyle.Default">
            <summary>
            Custom buttons should be displayed as normal buttons.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogCustomButtonStyle.CommandLinks">
            <summary>
            Custom buttons should be displayed as command links.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogCustomButtonStyle.CommandLinksNoIcon">
            <summary>
            Custom buttons should be displayed as command links, but without an icon.
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogExpander">
            <summary>
            
            </summary>
        </member>
        <member name="E:KPreisser.UI.TaskDialogExpander.ExpandedChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogExpander.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogExpander.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:KPreisser.UI.TaskDialogExpander.Text">
            <summary>
            Gets or sets the text to be displayed in the dialog's expanded area.
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogExpander.ExpandedButtonText">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogExpander.CollapsedButtonText">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogExpander.Expanded">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogExpander.ExpandFooterArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogExpander.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KPreisser.UI.TaskDialogFooter">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogFooter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogFooter.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:KPreisser.UI.TaskDialogFooter.Text">
            <summary>
            Gets or sets the text to be displayed in the dialog's footer area.
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogFooter.Icon">
            <summary>
            Gets or sets the footer icon.
            </summary>
            <remarks>
            This property can be set while the dialog is shown (but in that case, it
            cannot be switched between instances of <see cref="T:KPreisser.UI.TaskDialogIconHandle"/>
            and instances of other icon types).
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialogFooter.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KPreisser.UI.TaskDialogHyperlinkClickedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogHyperlinkClickedEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="hyperlink"></param>
        </member>
        <member name="P:KPreisser.UI.TaskDialogHyperlinkClickedEventArgs.Hyperlink">
            <summary>
            
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogIcon">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogIcon.op_Implicit(KPreisser.UI.TaskDialogStandardIcon)~KPreisser.UI.TaskDialogIcon">
            <summary>
            
            </summary>
            <param name="icon"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogIcon.op_Implicit(System.Drawing.Icon)~KPreisser.UI.TaskDialogIcon">
            <summary>
            
            </summary>
            <param name="icon"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogIcon.Get(KPreisser.UI.TaskDialogStandardIcon)">
            <summary>
            
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="T:KPreisser.UI.TaskDialogIconHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogIconHandle.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="iconHandle"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogIconHandle.#ctor(System.Drawing.Icon)">
            <summary>
            
            </summary>
            <param name="icon"></param>
        </member>
        <member name="P:KPreisser.UI.TaskDialogIconHandle.IconHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_FLAGS.TDF_NO_SET_FOREGROUND">
            <summary>
            "Don't call SetForegroundWindow() when activating the dialog"
            </summary>
            <remarks>
            This flag is available on Windows NT 6.2 ("Windows 8") and higher.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_FLAGS.TDF_SIZE_TO_CONTENT">
            <summary>
            "used by ShellMessageBox to emulate MessageBox sizing behavior"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_BUTTON">
            <summary>
            "wParam = Button ID"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_MARQUEE_PROGRESS_BAR">
            <summary>
            "wParam = 0 (nonMarque) wParam != 0 (Marquee)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_STATE">
            <summary>
            "wParam = new progress state"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_RANGE">
            <summary>
            "lParam = MAKELPARAM(nMinRange, nMaxRange)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_POS">
            <summary>
            "wParam = new position"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_MARQUEE">
            <summary>
            "wParam = 0 (stop marquee), wParam != 0 (start marquee),
            lparam = speed (milliseconds between repaints)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_ELEMENT_TEXT">
            <summary>
            "wParam = element (TASKDIALOG_ELEMENTS), lParam = new element text (LPCWSTR)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_RADIO_BUTTON">
            <summary>
            "wParam = Radio Button ID"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_ENABLE_BUTTON">
            <summary>
            "lParam = 0 (disable), lParam != 0 (enable), wParam = Button ID"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_ENABLE_RADIO_BUTTON">
            <summary>
            "lParam = 0 (disable), lParam != 0 (enable), wParam = Radio Button ID"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_VERIFICATION">
            <summary>
            "wParam = 0 (unchecked), 1 (checked), lParam = 1 (set key focus)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_UPDATE_ELEMENT_TEXT">
            <summary>
            "wParam = element (TASKDIALOG_ELEMENTS), lParam = new element text (LPCWSTR)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE">
            <summary>
            "wParam = Button ID, lParam = 0 (elevation not required),
            lParam != 0 (elevation required)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_MESSAGES.TDM_UPDATE_ICON">
            <summary>
            "wParam = icon element (TASKDIALOG_ICON_ELEMENTS), lParam = new icon
            (hIcon if TDF_USE_HICON_* was set, PCWSTR otherwise)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_BUTTON_CLICKED">
            <summary>
            "wParam = Button ID"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_HYPERLINK_CLICKED">
            <summary>
            "lParam = (LPCWSTR)pszHREF"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_TIMER">
            <summary>
            "wParam = Milliseconds since dialog created or timer reset"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_RADIO_BUTTON_CLICKED">
            <summary>
            "wParam = Radio Button ID"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_VERIFICATION_CLICKED">
            <summary>
            "wParam = 1 if checkbox checked, 0 if not, lParam is unused and always 0"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOG_NOTIFICATIONS.TDN_EXPANDO_BUTTON_CLICKED">
            <summary>
            "wParam = 0 (dialog is now collapsed), wParam != 0 (dialog is now expanded)"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOGCONFIG.hwndParent">
            <summary>
            "incorrectly named, this is the owner window, not a parent."
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOGCONFIG.hInstance">
            <summary>
            "used for MAKEINTRESOURCE() strings"
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogNativeMethods.TASKDIALOGCONFIG.cxWidth">
            <summary>
            "width of the Task Dialog's client area in DLU's. If 0, Task Dialog
            will calculate the ideal width."
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogPage.CustomButtonStartID">
            <summary>
            The start ID for custom buttons.
            </summary>
            <remarks>
            We need to ensure we don't use a ID that is already used for a
            standard button (TaskDialogResult), so we start with 100 to be safe
            (100 is also used as first ID in MSDN examples for the task dialog).
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialogPage.RadioButtonStartID">
            <summary>
            The start ID for radio buttons.
            </summary>
            <remarks>
            This must be at least 1 because 0 already stands for "no button".
            </remarks>
        </member>
        <member name="E:KPreisser.UI.TaskDialogPage.Created">
            <summary>
            Occurs after this instance is bound to a task dialog and the task dialog
            has created the GUI elements represented by this
            <see cref="T:KPreisser.UI.TaskDialogPage"/> instance.
            </summary>
            <remarks>
            This will happen after showing or navigating the dialog.
            </remarks>
        </member>
        <member name="E:KPreisser.UI.TaskDialogPage.Destroyed">
            <summary>
            Occurs when the task dialog is about to destroy the GUI elements represented
            by this <see cref="T:KPreisser.UI.TaskDialogPage"/> instance and it is about to be
            unbound from the task dialog.
            </summary>
            <remarks>
            This will happen when closing or navigating the dialog.
            </remarks>
        </member>
        <member name="E:KPreisser.UI.TaskDialogPage.Help">
            <summary>
            Occurs when the user presses F1 while the task dialog has focus, or when the
            user clicks the <see cref="F:KPreisser.UI.TaskDialogButtons.Help"/> button.
            </summary>
        </member>
        <member name="E:KPreisser.UI.TaskDialogPage.HyperlinkClicked">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogPage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.StandardButtons">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.CustomButtons">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.RadioButtons">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.CheckBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.Expander">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.Footer">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.ProgressBar">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.Title">
            <summary>
            Gets or sets the title of the task dialog window.
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.Instruction">
            <summary>
            Gets or sets the main instruction text.
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.Text">
            <summary>
            Gets or sets the dialog's primary text content.
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.Icon">
            <summary>
            Gets or sets the main icon.
            </summary>
            <remarks>
            This property can be set while the dialog is shown (but in that case, it
            cannot be switched between instances of <see cref="T:KPreisser.UI.TaskDialogIconHandle"/>
            and instances of other icon types).
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.Width">
            <summary>
            Gets or sets the width in dialog units that the dialog's client area will get
            when the dialog is is created or navigated.
            If <c>0</c>, the width will be automatically calculated by the system.
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.CustomButtonStyle">
            <summary>
            Gets or sets the <see cref="T:KPreisser.UI.TaskDialogCustomButtonStyle"/> that specifies how to
            display custom buttons.
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.EnableHyperlinks">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.AllowCancel">
            <summary>
            Gets or sets a value that indicates whether the task dialog can be canceled
            by pressing ESC, Alt+F4 or clicking the title bar's close button even if no
            <see cref="F:KPreisser.UI.TaskDialogButtons.Cancel"/> button is specified in
            <see cref="P:KPreisser.UI.TaskDialogPage.StandardButtons"/>.
            </summary>
            <remarks>
            You can intercept cancellation of the dialog without displaying a "Cancel"
            button by adding a <see cref="T:KPreisser.UI.TaskDialogStandardButton"/> with its
            <see cref="P:KPreisser.UI.TaskDialogStandardButton.Visible"/> set to <c>false</c> and specifying
            a <see cref="F:KPreisser.UI.TaskDialogResult.Cancel"/> result.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.RightToLeftLayout">
            <summary>
            
            </summary>
            <remarks>
            Note that once a task dialog has been opened with or has navigated to a
            <see cref="T:KPreisser.UI.TaskDialogPage"/> where this flag is set, it will keep on
            subsequent navigations to a new <see cref="T:KPreisser.UI.TaskDialogPage"/> even when
            it doesn't have this flag set.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.CanBeMinimized">
            <summary>
            Gets or sets a value that indicates whether the task dialog can be minimized
            when it is shown modeless.
            </summary>
            <remarks>
            When setting this property to <c>true</c>, <see cref="P:KPreisser.UI.TaskDialogPage.AllowCancel"/> is
            automatically implied.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.SizeToContent">
            <summary>
            Indicates that the width of the task dialog is determined by the width
            of its content area (similar to Message Box sizing behavior).
            </summary>
            <remarks>
            This flag is ignored if <see cref="P:KPreisser.UI.TaskDialogPage.Width"/> is not set to <c>0</c>.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogPage.WaitingForInitialization">
            <summary>
            Gets a value that indicates if the <see cref="F:KPreisser.UI.TaskDialogPage._boundTaskDialog"/>
            started navigation to this page but navigation did not yet complete
            (in which case we cannot modify the dialog even though we are bound).
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogPage.OnCreated(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogPage.OnDestroyed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogPage.OnHelp(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogPage.OnHyperlinkClicked(KPreisser.UI.TaskDialogHyperlinkClickedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:KPreisser.UI.TaskDialogProgressBar">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogProgressBar.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogProgressBar.#ctor(KPreisser.UI.TaskDialogProgressBarState)">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogProgressBar.State">
            <summary>
            Gets or sets the state of the progress bar.
            </summary>
            <remarks>
            This property can be set while the dialog is shown. However, it is
            not possible to change the state from
            <see cref="F:KPreisser.UI.TaskDialogProgressBarState.None"/> to any other state,
            and vice versa.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogProgressBar.Minimum">
            <summary>
            
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogProgressBar.Maximum">
            <summary>
            
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogProgressBar.Value">
            <summary>
            
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogProgressBar.MarqueeSpeed">
            <summary>
            
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="T:KPreisser.UI.TaskDialogProgressBarState">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogProgressBarState.Normal">
            <summary>
            Shows a regular progress bar.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogProgressBarState.Paused">
            <summary>
            Shows a paused (yellow) progress bar.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogProgressBarState.Error">
            <summary>
            Shows an error (red) progress bar.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogProgressBarState.Marquee">
            <summary>
            Shows a marquee progress bar.
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogProgressBarState.MarqueePaused">
            <summary>
            Shows a marquee progress bar where the marquee animation is paused.
            </summary>
            <remarks>
            For example, if you switch from <see cref="F:KPreisser.UI.TaskDialogProgressBarState.Marquee"/> to 
            <see cref="F:KPreisser.UI.TaskDialogProgressBarState.MarqueePaused"/> while the dialog is shown, the 
            marquee animation will stop.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialogProgressBarState.None">
            <summary>
            The progress bar will not be displayed.
            </summary>
            <remarks>
            Note that while the dialog is showing, you cannot switch from
            <see cref="F:KPreisser.UI.TaskDialogProgressBarState.None"/> to any other state, and vice versa.
            </remarks>
        </member>
        <member name="T:KPreisser.UI.TaskDialogRadioButton">
            <summary>
            
            </summary>
        </member>
        <member name="E:KPreisser.UI.TaskDialogRadioButton.CheckedChanged">
            <summary>
            Occurs when the value of the <see cref="P:KPreisser.UI.TaskDialogRadioButton.Checked"/> property has changed
            while this control is bound to a task dialog.
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButton.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButton.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogRadioButton.Enabled">
            <summary>
            
            </summary>
            <remarks>
            This property can be set while the dialog is shown.
            </remarks>
        </member>
        <member name="P:KPreisser.UI.TaskDialogRadioButton.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogRadioButton.Checked">
            <summary>
            
            </summary>
            <remarks>
            This property can be set to <c>true</c> while the dialog is shown (except
            from within the <see cref="E:KPreisser.UI.TaskDialogRadioButton.CheckedChanged"/> event).
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButton.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KPreisser.UI.TaskDialogRadioButtonCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButtonCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButtonCollection.Add(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButtonCollection.SetItem(System.Int32,KPreisser.UI.TaskDialogRadioButton)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButtonCollection.InsertItem(System.Int32,KPreisser.UI.TaskDialogRadioButton)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButtonCollection.RemoveItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogRadioButtonCollection.ClearItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.OK">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.Cancel">
            <summary>
            
            </summary>
            <remarks>
            Note: Adding a Cancel button will automatically add a close button
            to the task dialog's title bar and will allow to close the dialog by
            pressing ESC or Alt+F4 (just as if you enabled
            <see cref="P:KPreisser.UI.TaskDialogPage.AllowCancel"/>).
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.Retry">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.Ignore">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.Yes">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.No">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.Close">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.Help">
            <summary>
            
            </summary>
            <remarks>
            Note: Clicking this button will not close the dialog, but will raise the
            <see cref="E:KPreisser.UI.TaskDialogPage.Help"/> event.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.TryAgain">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogResult.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogStandardButton">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButton.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButton.#ctor(KPreisser.UI.TaskDialogResult)">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:KPreisser.UI.TaskDialogStandardButton.Result">
            <summary>
            Gets or sets the <see cref="T:KPreisser.UI.TaskDialogResult"/> which is represented by
            this <see cref="T:KPreisser.UI.TaskDialogStandardButton"/>.
            </summary>
        </member>
        <member name="P:KPreisser.UI.TaskDialogStandardButton.Visible">
            <summary>
            Gets or sets a value that indicates if this
            <see cref="T:KPreisser.UI.TaskDialogStandardButton"/> should be shown when displaying
            the Task Dialog.
            </summary>
            <remarks>
            Setting this to <c>false</c> allows you to still receive the
            <see cref="E:KPreisser.UI.TaskDialogButton.Click"/> event (e.g. for the
            <see cref="F:KPreisser.UI.TaskDialogResult.Cancel"/> button when
            <see cref="P:KPreisser.UI.TaskDialogPage.AllowCancel"/> is set), or to call the
            <see cref="M:KPreisser.UI.TaskDialogButton.PerformClick"/> method even if the button
            is not shown.
            </remarks>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButton.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KPreisser.UI.TaskDialogStandardButtonCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.op_Implicit(KPreisser.UI.TaskDialogButtons)~KPreisser.UI.TaskDialogStandardButtonCollection">
            <summary>
            
            </summary>
            <param name="buttons"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.GetResultsForButtonFlags(KPreisser.UI.TaskDialogButtons)">
            <summary>
            
            </summary>
            <param name="buttons"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.Add(KPreisser.UI.TaskDialogResult)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.GetKeyForItem(KPreisser.UI.TaskDialogStandardButton)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.SetItem(System.Int32,KPreisser.UI.TaskDialogStandardButton)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.InsertItem(System.Int32,KPreisser.UI.TaskDialogStandardButton)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.RemoveItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:KPreisser.UI.TaskDialogStandardButtonCollection.ClearItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogStandardIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.SecurityShield">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.SecurityShieldBlueBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.SecurityShieldGrayBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.SecurityWarningYellowBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.SecurityErrorRedBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStandardIcon.SecuritySuccessGreenBar">
            <summary>
            
            </summary>
        </member>
        <member name="T:KPreisser.UI.TaskDialogStartupLocation">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStartupLocation.CenterScreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.TaskDialogStartupLocation.CenterParent">
            <summary>
            
            </summary>
        </member>
        <member name="F:KPreisser.UI.WindowSubclassHandler._windowProcDelegate">
            <summary>
            The delegate for the callback handler (that calls
            <see cref="M:KPreisser.UI.WindowSubclassHandler.WndProc(System.Int32,System.IntPtr,System.IntPtr)"/> from which the native function
            pointer <see cref="F:KPreisser.UI.WindowSubclassHandler._windowProcDelegatePtr"/> is created. 
            </summary>
            <remarks>
            We must store this delegate (and prevent it from being garbage-collected)
            to ensure the function pointer doesn't become invalid.
            
            Note: We create a new delegate (and native function pointer) for each
            instance because even though creation will be slower (and requires a
            bit of memory to store the native code) it will be faster when the window
            procedure is invoked, because otherwise we would need to use a dictionary
            to map the hWnd to the instance, as the window procedure doesn't allow
            to store reference data. However, this is also the way that the
            NativeWindow class of WinForms does it.
            </remarks>
        </member>
        <member name="F:KPreisser.UI.WindowSubclassHandler._windowProcDelegatePtr">
            <summary>
            The function pointer created from <see cref="F:KPreisser.UI.WindowSubclassHandler._windowProcDelegate"/>.
            </summary>
        </member>
        <member name="M:KPreisser.UI.WindowSubclassHandler.Open">
            <summary>
            Subclasses the window.
            </summary>
            <remarks>
            You must call <see cref="M:KPreisser.UI.WindowSubclassHandler.Dispose"/> to undo the subclassing before
            the window is destroyed.
            </remarks>
            <returns></returns>
        </member>
    </members>
</doc>
